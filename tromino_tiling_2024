class tromino_tiling:

    def __init__(self):
        self.tile_count = 0

    def getCenter(self, hole_x_start, hole_x_end, hole_y_start, hole_y_end):
        return ((hole_x_start + hole_x_end) // 2, (hole_y_start + hole_y_end) // 2)
    
    def withinbounds(self, tile_x, tile_y, hole_x_start, hole_x_end, hole_y_start, hole_y_end):
        return (hole_x_start <= tile_x <= hole_x_end) and (hole_y_start <= tile_y <= hole_y_end)
    
    def placeTile(self, tileMap, x, y, hole_x, hole_y, n):
        for i in range(n):
            for j in range(n):
                if i != hole_x or j != hole_y:
                    tileMap[x + i][y + j] = 'tile'
                    self.tile_count += 1
        
    def solve(self, n, tileMap, hole_x_start, hole_x_end, hole_y_start, hole_y_end, hole_x, hole_y):
        if n == 1:
            return
        size = 2 ** (n - 1)
        chole_x, chole_y = self.getCenter(hole_x_start, hole_x_end, hole_y_start, hole_y_end)
        if hole_x <= chole_x and hole_y <= chole_y:
            self.placeTile(tileMap, chole_x, chole_y, chole_x, chole_y, n)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, hole_y_start, chole_y, hole_x, hole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, hole_y_start, chole_y, chole_x, chole_y)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, chole_y + 1, hole_y_end, chole_x, chole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, chole_y + 1, hole_y_end, chole_x, chole_y)
        elif hole_x <= chole_x and hole_y > chole_y:
            self.placeTile(tileMap, chole_x, chole_y, chole_x, chole_y + 1, n)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, hole_y_start, chole_y, chole_x, chole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, hole_y_start, chole_y, chole_x, chole_y)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, chole_y + 1, hole_y_end, hole_x, hole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, chole_y + 1, hole_y_end, chole_x, chole_y + 1)
        elif hole_x > chole_x and hole_y <= chole_y:
            self.placeTile(tileMap, chole_x, chole_y, chole_x + 1, chole_y, n)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, hole_y_start, chole_y, hole_x, hole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, hole_y_start, chole_y, chole_x + 1, chole_y)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, chole_y + 1, hole_y_end, chole_x, chole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, chole_y + 1, hole_y_end, chole_x + 1, chole_y)
        elif hole_x > chole_x and hole_y > chole_y:
            self.placeTile(tileMap, chole_x, chole_y, chole_x + 1, chole_y + 1, n)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, hole_y_start, chole_y, hole_x, hole_y)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, hole_y_start, chole_y, chole_x + 1, chole_y)
            self.solve(n - 1, tileMap, hole_x_start, chole_x, chole_y + 1, hole_y_end, chole_x, chole_y + 1)
            self.solve(n - 1, tileMap, chole_x + 1, hole_x_end, chole_y + 1, hole_y_end, chole_x + 1, chole_y + 1)
    
    def tromino_tiling(self, n, hole_x, hole_y):
        tileMap = [['hole' for _ in range(2**n)] for _ in range(2**n)]
        tileMap[hole_x][hole_y] = 'hole'
        self.solve(n, tileMap, 0, 2**n - 1, 0, 2**n - 1, hole_x, hole_y)
        for row in tileMap:
            print(row)
